{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Flaker: A Flaky Network Simulator for Mobile App Development","text":"<p>Developing a mobile app that performs flawlessly in the real world requires thorough testing under a variety of network conditions. Introducing Flaker \u2013 your assistant tool for recreating real-world network scenarios directly in your mobile app development environment. \ud83d\udcf1\ud83d\udca1</p>"},{"location":"#what-is-flaker","title":"What is Flaker?","text":"<p>Flaker is a powerful network simulator designed to make your mobile app development process smoother and more efficient. With Flaker, you can effortlessly emulate a wide range of network conditions, enabling you to fine-tune your app's performance and ensure it delivers an exceptional user experience under any circumstance. \ud83c\udf10\ud83d\udee0\ufe0f</p>"},{"location":"#key-features","title":"Key Features:","text":""},{"location":"#experience-slow-networks","title":"Experience Slow Networks \ud83d\udc22","text":"<p>Ever wondered how your app would perform on a slow and sluggish network? With Flaker, you can replicate these scenarios with ease. Test your app's responsiveness and optimize its behavior under adverse network conditions. \ud83d\ude80\ud83d\udc0c</p>"},{"location":"#emulate-flaky-networks","title":"Emulate Flaky Networks \ud83d\udcf6","text":"<p>Network connections in the real world are rarely stable. Flaker allows you to introduce fail percentage and variance controls, mirroring the unpredictable nature of network connections. Gain a firsthand understanding of the challenges your mobile app might face and ensure it remains resilient. \ud83d\udd2e\ud83d\udd0c</p>"},{"location":"#focused-impact","title":"Focused Impact \ud83c\udfaf","text":"<p>Flaker is designed to impact only your app's network conditions, leaving your device's overall network functionality undisturbed. This means you can test and fine-tune your app's performance without affecting your entire device's connectivity. \ud83d\udce1\ud83d\udd0d</p>"},{"location":"#who-can-benefit-from-flaker","title":"Who Can Benefit from Flaker?","text":"<p>Whether you're a mobile app developer looking to enhance user experiences or a tester seeking to validate your app's resilience, Flaker provides an intuitive and indispensable tool within your development workflow. Elevate your testing strategies and boost your app's performance with Flaker.</p> <p>Flaker empowers you to:</p> <p>\u2705 Test under various network conditions</p> <p>\u2705 Optimize your app for slow networks</p> <p>\u2705 Prepare your app for flaky network connections</p> <p>\u2705 Ensure your app's stability and reliability</p> <p>\u2705 Enhance user satisfaction and retention</p>"},{"location":"#flaker-android-demo","title":"flaker android demo","text":"<p>\ud83d\udcfa Checkout the demo here</p>"},{"location":"#built-with","title":"Built with","text":"<p>Kotlin: \ud83d\ude80 The primary programming language.</p> <p>Kotlin Multiplatform: \ud83d\udcf1\ud83c\udf4f Sharing common logic across Android and iOS.</p> <p>Jetpack Compose: \ud83d\uddbc\ufe0f For building the UI for the Android companion app. Supports dynamic theming.</p> <p>SqlDelight: \ud83d\udcca For a shared database and persistence layer between multiple platforms.</p> <p>Jetpack DataStore: \ud83d\udce6 For the shared persistence layer to store user preferences and configuration of Flaker.</p> <p>Okhttp: \ud83d\udce1 For creating Flaker for Android apps using Okhttp3 for networking.</p> <p>Ktor: \ud83c\udf10 For creating Flaker targeting both Android and iOS apps using Ktor for networking. (\ud83d\udea7 In Progress)</p> <p>SwiftUI: \ud83c\udf4f For building the UI for the iOS companion app. Supports dynamic theming. (\ud83d\udea7 In Progress)</p>"},{"location":"#find-this-library-useful","title":"Find this library useful?","text":"<p>Support it by joining stargazers for this repository on github. \u2b50\ufe0f </p>"},{"location":"development/","title":"Development","text":""},{"location":"development/#development","title":"Development","text":""},{"location":"development/#library-code-map","title":"Library Code Map","text":""},{"location":"development/#build","title":"Build","text":"<p>Simply clone this repository in Android Studio Giraffe or above and build the project.</p>"},{"location":"development/#module-details","title":"Module Details","text":"<p>flaker-domain: Contains the domain of the Flaker library, used by other modules, including network requests and user preferences. \ud83c\udfe0</p> <p>flaker-data: Contains the data layer of the Flaker library, used by other modules to access locally stored data. All persistent data should be kept here. \ud83d\udcca</p> <p>flaker-okhttp-core: Core module containing the functionality to intercept network requests and simulate network conditions using OkHttp Interceptor. \ud83c\udf10</p> <p>flaker-ktor-core: Core module containing the functionality to intercept network requests and simulate network conditions using Ktor. \ud83c\udf10</p> <p>flaker-android-ui: Contains reusable UI elements and components for the Android companion app. \ud83d\udcf1\ud83c\udfa8</p> <p>flaker-android-okhttp: Contains the companion app that gets installed as a part of the library. This should be used for apps that use OkHttp as their networking library. \ud83d\udcf1\ud83d\udce1</p> <p>flaker-android-ktor: Contains the companion app that gets installed as a part of the library. This should be used for apps that use Ktor as their networking library. \ud83d\udcf1\ud83c\udf10</p> <p>flaker-android: Contains the companion app that gets installed as a part of the library. This should be used for apps that use both OkHttp and Ktor as their networking library. \ud83d\udcf1\ud83d\udce1\ud83c\udf10</p>"},{"location":"development/#verify","title":"Verify","text":"<p>We use <code>detekt</code> for static code analyis and a job is setup in github actions to run it on every PR. You can run it locally using the following command:</p> <pre><code>// For android related changes\n./gradlew detekt\n\n// For iOS related changes\n./gradlew detektMetadataIosMain\n\n// For common code changes\n./gradlew detektMetadataCommonMain\n</code></pre> <p>If you want to <code>detekt</code> to auto correct some of the stuff, please add the flag <code>--auto-correct</code> to the above commands.</p>"},{"location":"development/#contributing","title":"Contributing","text":"<p>If you've found an error in this sample, please \ud83d\udea9 file an issue.</p> <p>Patches are encouraged and may be submitted by forking this project and submitting a pull request. Since this project is still in its very early stages, if your change is substantial, please raise an issue first to discuss it. \ud83e\udd1d</p>"},{"location":"getting-started/","title":"Usage","text":""},{"location":"getting-started/#installation","title":"Installation","text":"<p>Add <code>mavenCentral()</code> to repositories in your <code>build.gradle</code> file.</p> <pre><code>   repositories {\n        mavenCentral()\n   }\n</code></pre> <p>Add the following dependency to your <code>build.gradle</code></p> <pre><code>   dependencies {\n        debugImplementation(\"io.github.rotbolt:flaker-android-okhttp:${latest_version}\")\n        releaseImplementation(\"io.github.rotbolt:flaker-android-okhttp-noop:${latest_version}\")\n   }\n</code></pre>"},{"location":"getting-started/#flaker-android-okhttp","title":"flaker-android-okhttp","text":"<p>Add the following statement to your app's onCreate method.</p> <pre><code>   class MainApplication: Application() {\n       override fun onCreate() {\n           super.onCreate()\n           FlakerAndroidOkhttpContainer.install(this)\n       }\n   }\n</code></pre> <p>Then in your okhttp client builder, add the following interceptor.</p> <pre><code>    val client = OkHttpClient.Builder()\n        .addInterceptor(FlakerInterceptor.Builder().build())\n        .build()\n</code></pre> <p>That's it. Now upon installing your app, a companion app <code>flaker</code>  will be installed on your device. You can use this app to configure the network conditions for your app.</p>"},{"location":"getting-started/#configuration","title":"Configuration","text":"<p>You can configure the following parameters in the <code>FlakerInterceptor</code>.</p> <ul> <li>Failure Response by Flaker</li> </ul> <pre><code>    val flakerFailResponse = FlakerFailResponse(\n        httpCode = 500,\n        message = \"Flaker is enabled. This is a flaky response.\",\n        responseBodyString = \"Test Failure\"\n    )\n     val flakerInterceptor = FlakerInterceptor.Builder()\n        .failResponse(flakerFailResponse)\n        .build()\n</code></pre>"},{"location":"getting-started/#flaker-android-ktor","title":"flaker-android-ktor","text":"<p>In progress</p>"},{"location":"getting-started/#flaker-ios-ktor-in-progress","title":"flaker-ios-ktor (In Progress)","text":"<p>In progress</p>"},{"location":"getting-started/#releases","title":"Releases","text":"<p>For the latest release versions, please check the github releases</p>"}]}